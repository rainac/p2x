// -*- c++ -*- 
// This file has been automatically generated by 
// gennc.sh $Id: gennc.xsl 31 2013-11-07 18:56:43Z jwillkomm $ 
// from definition file xml/token.ncd.xml. Class mode is true.
#ifndef gennc_enumParserToken__hh
#define gennc_enumParserToken__hh

    enum ParserToken {
       /**  */ 
TOKEN_EOF = 0, 
 /**  */ 
TOKEN_KEYW_FOR, 
 /**  */ 
TOKEN_KEYW_IF, 
 /**  */ 
TOKEN_KEYW_WHILE, 
 /**  */ 
TOKEN_KEYW_ELSE, 
 /**  */ 
TOKEN_KEYW_ELSEIF, 
 /**  */ 
TOKEN_KEYW_SWITCH, 
 /**  */ 
TOKEN_KEYW_CASE, 
 /**  */ 
TOKEN_KEYW_OTHERWISE, 
 /**  */ 
TOKEN_KEYW_DEFAULT, 
 /**  */ 
TOKEN_KEYW_RETURN, 
 /**  */ 
TOKEN_KEYW_FUNCTION, 
 /**  */ 
TOKEN_KEYW_BREAK, 
 /**  */ 
TOKEN_KEYW_CONTINUE, 
 /**  */ 
TOKEN_KEYW_GOTO, 
 /**  */ 
TOKEN_KEYW_STATIC, 
 /**  */ 
TOKEN_KEYW_PUBLIC, 
 /**  */ 
TOKEN_KEYW_PRIVATE, 
 /**  */ 
TOKEN_KEYW_REGISTER, 
 /**  */ 
TOKEN_KEYW_AUTO, 
 /**  */ 
TOKEN_KEYW_VAR, 
 /**  */ 
TOKEN_KEYW_CONST, 
 /**  */ 
TOKEN_KEYW_GLOBAL, 
 /**  */ 
TOKEN_KEYW_PERSISTENT, 
 /**  */ 
TOKEN_KEYW_TRY, 
 /**  */ 
TOKEN_KEYW_CATCH, 
 /**  */ 
TOKEN_KEYW_END, 
 /**  */ 
TOKEN_ROOT, 
 /**  */ 
TOKEN_INTEGER, 
 /**  */ 
TOKEN_FLOAT, 
 /**  */ 
TOKEN_STRING, 
 /**  */ 
TOKEN_IDENTIFIER, 
 /**  */ 
TOKEN_HASH_COMMENT, 
 /**  */ 
TOKEN_CLINE_COMMENT, 
 /**  */ 
TOKEN_C_COMMENT, 
 /**  */ 
TOKEN_L_PAREN, 
 /**  */ 
TOKEN_R_PAREN, 
 /**  */ 
TOKEN_L_BRACE, 
 /**  */ 
TOKEN_R_BRACE, 
 /**  */ 
TOKEN_L_BRACKET, 
 /**  */ 
TOKEN_R_BRACKET, 
 /**  */ 
TOKEN_EQUAL, 
 /**  */ 
TOKEN_LESS, 
 /**  */ 
TOKEN_GREATER, 
 /**  */ 
TOKEN_EXCLAM, 
 /**  */ 
TOKEN_QUESTION, 
 /**  */ 
TOKEN_TILDE, 
 /**  */ 
TOKEN_PLUS, 
 /**  */ 
TOKEN_MINUS, 
 /**  */ 
TOKEN_MULT, 
 /**  */ 
TOKEN_DIV, 
 /**  */ 
TOKEN_BACKSLASH, 
 /**  */ 
TOKEN_MOD, 
 /**  */ 
TOKEN_POW, 
 /**  */ 
TOKEN_COLON, 
 /**  */ 
TOKEN_COMMA, 
 /**  */ 
TOKEN_SEMICOLON, 
 /**  */ 
TOKEN_FULL_STOP, 
 /**  */ 
TOKEN_UNDERSCORE, 
 /**  */ 
TOKEN_DOLLAR, 
 /**  */ 
TOKEN_AT, 
 /**  */ 
TOKEN_AND, 
 /**  */ 
TOKEN_OR, 
 /**  */ 
TOKEN_CIRC, 
 /**  */ 
TOKEN_HASH, 
 /**  */ 
TOKEN_QUOTE, 
 /**  */ 
TOKEN_APOS, 
 /**  */ 
TOKEN_CRETURN, 
 /**  */ 
TOKEN_NEWLINE, 
 /**  */ 
TOKEN_TAB, 
 /**  */ 
TOKEN_SPACE, 
 /**  */ 
TOKEN_JUXTA, 
 /**  */ 
TOKEN_JUXTA_POST, 
 /**  */ 
TOKEN_ILLEGAL_CHAR, 
 /**  */ 
TOKEN_LEFT_ARROW, 
 /**  */ 
TOKEN_RIGHT_ARROW, 
 /**  */ 
TOKEN_DOUBLE_LEFT_ARROW, 
 /**  */ 
TOKEN_DOUBLE_RIGHT_ARROW, 
 /**  */ 
TOKEN_DOUBLE_AND, 
 /**  */ 
TOKEN_DOUBLE_OR, 
 /**  */ 
TOKEN_DOUBLE_COLON, 
 /**  */ 
TOKEN_TRIPLE_COLON, 
 /**  */ 
TOKEN_LE, 
 /**  */ 
TOKEN_GE, 
 /**  */ 
TOKEN_DOUBLE_L_BRACKET, 
 /**  */ 
TOKEN_DOUBLE_R_BRACKET, 
 /**  */ 
TOKEN_DOUBLE_EQUAL, 
 /**  */ 
TOKEN_NOT_EQUAL, 
 /**  */ 
TOKEN_OPERATOR, 
 /**  */ 
TOKEN_MINUS_GREATER, 
 /**  */ 
TOKEN_DOUBLE_PLUS, 
 /**  */ 
TOKEN_DOUBLE_MINUS, 
 /**  */ 
TOKEN_DOUBLE_LESS, 
 /**  */ 
TOKEN_DOUBLE_GREATER, 
 /**  */ 
TOKEN_AND_EQUAL, 
 /**  */ 
TOKEN_OR_EQUAL, 
 /**  */ 
TOKEN_POW_EQUAL, 
 /**  */ 
TOKEN_PLUS_EQUAL, 
 /**  */ 
TOKEN_MINUS_EQUAL, 
 /**  */ 
TOKEN_MULT_EQUAL, 
 /**  */ 
TOKEN_DIV_EQUAL, 
 /**  */ 
TOKEN_MOD_EQUAL, 
 /**  */ 
TOKEN_DOUBLE_LESS_EQUAL, 
 /**  */ 
TOKEN_DOUBLE_GREATER_EQUAL, 
 /**  */ 
TOKEN_LAST
 
    };
  #endif

