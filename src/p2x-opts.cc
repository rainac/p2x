/*
  File autogenerated by gengetopt version 2.23
  generated with the following command:
  gengetopt -F p2x-opts -c cc -H hh -C --no-handle-version --no-handle-help --no-handle-error -i p2x-opts.ggo --unamed-opts 

  The developers of gengetopt consider the fixed text that goes in all
  gengetopt output files to be in the public domain:
  we make no copyright claims on it.
*/

/* If we use autoconf.  */
#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#ifndef FIX_UNUSED
#define FIX_UNUSED(X) (void) (X) /* avoid warnings for unused params */
#endif

#include <getopt.h>

#include "p2x-opts.hh"

const char *gengetopt_args_info_purpose = "Universal parser with XML output";

const char *gengetopt_args_info_usage = "Usage: p2x {option} file";

const char *gengetopt_args_info_versiontext = "";

const char *gengetopt_args_info_description = "Text is parsed into a binary tree using precedence and associativity.";

const char *gengetopt_args_info_full_help[] = {
  "  -h, --help                    Print help and exit",
  "      --full-help               Print help, including hidden options, and exit",
  "      --version                 Print version and exit",
  "  -V, --verbose[=<number>|error|warning|info|debug|scan|parse|config|files|io]\n                                Control messages by bit mask\n                                  (default=`error|warning')",
  "      --debug                   Enable debugging  (default=off)",
  "  -p, --prec-list=filename      Precedence file list",
  "  -i, --ignore=TokenList        Add an item to ignore",
  "  -b, --binary=TokenList        Add a binary operator",
  "  -r, --right=TokenList         Add a right associative operator",
  "  -u, --unary=TokenList         Add a unary operator",
  "      --postfix=TokenList       Add a postfix operator",
  "  -I, --item=TokenList          Add an item",
  "  -B, --brace=TokenPair         Scope start and end token",
  "  -L, --list-token              List token types  (default=off)",
  "  -T, --list-classes            List token classes  (default=off)",
  "  -s, --scan-only               Scan only, do not parse  (default=off)",
  "  -S, --scanner=c|m|r|strings|no_strings\n                                Select scanner class  (default=`strings')",
  "      --stdin-tty               Read from stdin, even if it is a TTY\n                                  (default=off)",
  "\nOutput options:",
  "  -o, --outfile=Filename        Write output to file",
  "  -e, --input-encoding=Charset  Input encoding  (default=`utf-8')",
  "      --indent                  Indent  (default=on)",
  "      --indent-unit=STRING      Indentation unit  (default=` ')",
  "      --newline-as-br           Emit newline text as ca:br element\n                                  (default=on)",
  "      --newline-as-entity       Emit newline text as &#xa; character entity\n                                  (default=off)",
  "  -m, --merged                  Collect children of equal operator chains,\n                                  output all binary nodes in MERGED mode\n                                  (default=off)",
  "      --strict                  Strict output mode: paren children always\n                                  indicated by null elements  (default=off)",
  "  -l, --loose                   Loose output mode: never write null elements\n                                  (default=off)",
  "      --null=XML-Name           Null element name",
  "  -w, --sparse                  Safe some non-essential attributes, newlines\n                                  and indents  (default=off)",
  "      --write-xml-declaration   Emit XML declaration (with encoding)\n                                  (default=off)",
  "      --write-bom               Emit byte order mark (BOM) character\n                                  (default=off)",
  "  -O, --output-mode=Mode        Write output as normal (x) or alternative (y)\n                                  XML, or (J)SON or (M)ATLAB code\n                                  (default=`y')",
  "  -M, --matlab                  Write output as MATLAB  (default=off)",
  "  -J, --json                    Write output as JSON  (default=off)",
  "  -X, --xml                     Write output as XML  (default=off)",
  "  -n, --noignore                Skip ignore items  (default=off)",
  "      --write-recursive         Recursive output writing  (default=off)",
  "  -g, --src-info                Emit source location attributes line, column,\n                                  and character  (default=off)",
  "      --attribute-line          Emit attribute line with source line\n                                  (default=off)",
  "      --attribute-column        Emit attribute column with source column\n                                  (default=off)",
  "      --attribute-char          Emit attribute column with source char\n                                  (default=off)",
  "      --attribute-precedence    Emit attribute precedence with token precedence\n                                  (default=off)",
  "      --attribute-code          Emit attribute code with internal token code\n                                  (default=off)",
  "      --attribute-mode          Emit attribute mode with token mode\n                                  (default=off)",
  "      --attribute-type          Emit attribute type with token type\n                                  (default=on)",
  "      --attribute-id            Emit attribute id with token id  (default=off)",
  "      --element-ca-steps        Emit element ca:steps  (default=off)",
  "      --element-scanner         Add scanner configuration info to the output\n                                  XML  (default=off)",
  "      --element-parser          Add parser configuration info to the output XML\n                                  (default=off)",
  "      --element-treewriter      Add treewriter configuration info to the output\n                                  XML  (default=off)",
  "\nConfig options:",
  "  -c, --include-config          Add configuration info to the output XML\n                                  (default=off)",
    0
};

static void
init_help_array(void)
{
  gengetopt_args_info_help[0] = gengetopt_args_info_full_help[0];
  gengetopt_args_info_help[1] = gengetopt_args_info_full_help[1];
  gengetopt_args_info_help[2] = gengetopt_args_info_full_help[2];
  gengetopt_args_info_help[3] = gengetopt_args_info_full_help[3];
  gengetopt_args_info_help[4] = gengetopt_args_info_full_help[4];
  gengetopt_args_info_help[5] = gengetopt_args_info_full_help[5];
  gengetopt_args_info_help[6] = gengetopt_args_info_full_help[6];
  gengetopt_args_info_help[7] = gengetopt_args_info_full_help[7];
  gengetopt_args_info_help[8] = gengetopt_args_info_full_help[8];
  gengetopt_args_info_help[9] = gengetopt_args_info_full_help[9];
  gengetopt_args_info_help[10] = gengetopt_args_info_full_help[10];
  gengetopt_args_info_help[11] = gengetopt_args_info_full_help[11];
  gengetopt_args_info_help[12] = gengetopt_args_info_full_help[12];
  gengetopt_args_info_help[13] = gengetopt_args_info_full_help[13];
  gengetopt_args_info_help[14] = gengetopt_args_info_full_help[14];
  gengetopt_args_info_help[15] = gengetopt_args_info_full_help[15];
  gengetopt_args_info_help[16] = gengetopt_args_info_full_help[16];
  gengetopt_args_info_help[17] = gengetopt_args_info_full_help[17];
  gengetopt_args_info_help[18] = gengetopt_args_info_full_help[18];
  gengetopt_args_info_help[19] = gengetopt_args_info_full_help[19];
  gengetopt_args_info_help[20] = gengetopt_args_info_full_help[20];
  gengetopt_args_info_help[21] = gengetopt_args_info_full_help[21];
  gengetopt_args_info_help[22] = gengetopt_args_info_full_help[22];
  gengetopt_args_info_help[23] = gengetopt_args_info_full_help[23];
  gengetopt_args_info_help[24] = gengetopt_args_info_full_help[24];
  gengetopt_args_info_help[25] = gengetopt_args_info_full_help[25];
  gengetopt_args_info_help[26] = gengetopt_args_info_full_help[26];
  gengetopt_args_info_help[27] = gengetopt_args_info_full_help[27];
  gengetopt_args_info_help[28] = gengetopt_args_info_full_help[28];
  gengetopt_args_info_help[29] = gengetopt_args_info_full_help[29];
  gengetopt_args_info_help[30] = gengetopt_args_info_full_help[32];
  gengetopt_args_info_help[31] = gengetopt_args_info_full_help[33];
  gengetopt_args_info_help[32] = gengetopt_args_info_full_help[34];
  gengetopt_args_info_help[33] = gengetopt_args_info_full_help[35];
  gengetopt_args_info_help[34] = gengetopt_args_info_full_help[36];
  gengetopt_args_info_help[35] = gengetopt_args_info_full_help[38];
  gengetopt_args_info_help[36] = gengetopt_args_info_full_help[51];
  gengetopt_args_info_help[37] = gengetopt_args_info_full_help[52];
  gengetopt_args_info_help[38] = 0; 
  
}

const char *gengetopt_args_info_help[39];

typedef enum {ARG_NO
  , ARG_FLAG
  , ARG_STRING
} cmdline_parser_arg_type;

static
void clear_given (struct gengetopt_args_info *args_info);
static
void clear_args (struct gengetopt_args_info *args_info);

static int
cmdline_parser_internal (int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error);

static int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error);
struct line_list
{
  char * string_arg;
  struct line_list * next;
};

static struct line_list *cmd_line_list = 0;
static struct line_list *cmd_line_list_tmp = 0;

static void
free_cmd_list(void)
{
  /* free the list of a previous call */
  if (cmd_line_list)
    {
      while (cmd_line_list) {
        cmd_line_list_tmp = cmd_line_list;
        cmd_line_list = cmd_line_list->next;
        free (cmd_line_list_tmp->string_arg);
        free (cmd_line_list_tmp);
      }
    }
}


static char *
gengetopt_strdup (const char *s);

static
void clear_given (struct gengetopt_args_info *args_info)
{
  args_info->help_given = 0 ;
  args_info->full_help_given = 0 ;
  args_info->version_given = 0 ;
  args_info->verbose_given = 0 ;
  args_info->debug_given = 0 ;
  args_info->prec_list_given = 0 ;
  args_info->ignore_given = 0 ;
  args_info->binary_given = 0 ;
  args_info->right_given = 0 ;
  args_info->unary_given = 0 ;
  args_info->postfix_given = 0 ;
  args_info->item_given = 0 ;
  args_info->brace_given = 0 ;
  args_info->list_token_given = 0 ;
  args_info->list_classes_given = 0 ;
  args_info->scan_only_given = 0 ;
  args_info->scanner_given = 0 ;
  args_info->stdin_tty_given = 0 ;
  args_info->outfile_given = 0 ;
  args_info->input_encoding_given = 0 ;
  args_info->indent_given = 0 ;
  args_info->indent_unit_given = 0 ;
  args_info->newline_as_br_given = 0 ;
  args_info->newline_as_entity_given = 0 ;
  args_info->merged_given = 0 ;
  args_info->strict_given = 0 ;
  args_info->loose_given = 0 ;
  args_info->null_given = 0 ;
  args_info->sparse_given = 0 ;
  args_info->write_xml_declaration_given = 0 ;
  args_info->write_bom_given = 0 ;
  args_info->output_mode_given = 0 ;
  args_info->matlab_given = 0 ;
  args_info->json_given = 0 ;
  args_info->xml_given = 0 ;
  args_info->noignore_given = 0 ;
  args_info->write_recursive_given = 0 ;
  args_info->src_info_given = 0 ;
  args_info->attribute_line_given = 0 ;
  args_info->attribute_column_given = 0 ;
  args_info->attribute_char_given = 0 ;
  args_info->attribute_precedence_given = 0 ;
  args_info->attribute_code_given = 0 ;
  args_info->attribute_mode_given = 0 ;
  args_info->attribute_type_given = 0 ;
  args_info->attribute_id_given = 0 ;
  args_info->element_ca_steps_given = 0 ;
  args_info->element_scanner_given = 0 ;
  args_info->element_parser_given = 0 ;
  args_info->element_treewriter_given = 0 ;
  args_info->include_config_given = 0 ;
}

static
void clear_args (struct gengetopt_args_info *args_info)
{
  FIX_UNUSED (args_info);
  args_info->verbose_arg = NULL;
  args_info->verbose_orig = NULL;
  args_info->debug_flag = 0;
  args_info->prec_list_arg = NULL;
  args_info->prec_list_orig = NULL;
  args_info->ignore_arg = NULL;
  args_info->ignore_orig = NULL;
  args_info->binary_arg = NULL;
  args_info->binary_orig = NULL;
  args_info->right_arg = NULL;
  args_info->right_orig = NULL;
  args_info->unary_arg = NULL;
  args_info->unary_orig = NULL;
  args_info->postfix_arg = NULL;
  args_info->postfix_orig = NULL;
  args_info->item_arg = NULL;
  args_info->item_orig = NULL;
  args_info->brace_arg = NULL;
  args_info->brace_orig = NULL;
  args_info->list_token_flag = 0;
  args_info->list_classes_flag = 0;
  args_info->scan_only_flag = 0;
  args_info->scanner_arg = NULL;
  args_info->scanner_orig = NULL;
  args_info->stdin_tty_flag = 0;
  args_info->outfile_arg = NULL;
  args_info->outfile_orig = NULL;
  args_info->input_encoding_arg = NULL;
  args_info->input_encoding_orig = NULL;
  args_info->indent_flag = 1;
  args_info->indent_unit_arg = NULL;
  args_info->indent_unit_orig = NULL;
  args_info->newline_as_br_flag = 1;
  args_info->newline_as_entity_flag = 0;
  args_info->merged_flag = 0;
  args_info->strict_flag = 0;
  args_info->loose_flag = 0;
  args_info->null_arg = NULL;
  args_info->null_orig = NULL;
  args_info->sparse_flag = 0;
  args_info->write_xml_declaration_flag = 0;
  args_info->write_bom_flag = 0;
  args_info->output_mode_arg = gengetopt_strdup ("y");
  args_info->output_mode_orig = NULL;
  args_info->matlab_flag = 0;
  args_info->json_flag = 0;
  args_info->xml_flag = 0;
  args_info->noignore_flag = 0;
  args_info->write_recursive_flag = 0;
  args_info->src_info_flag = 0;
  args_info->attribute_line_flag = 0;
  args_info->attribute_column_flag = 0;
  args_info->attribute_char_flag = 0;
  args_info->attribute_precedence_flag = 0;
  args_info->attribute_code_flag = 0;
  args_info->attribute_mode_flag = 0;
  args_info->attribute_type_flag = 1;
  args_info->attribute_id_flag = 0;
  args_info->element_ca_steps_flag = 0;
  args_info->element_scanner_flag = 0;
  args_info->element_parser_flag = 0;
  args_info->element_treewriter_flag = 0;
  args_info->include_config_flag = 0;
  
}

static
void init_args_info(struct gengetopt_args_info *args_info)
{

  init_help_array(); 
  args_info->help_help = gengetopt_args_info_full_help[0] ;
  args_info->full_help_help = gengetopt_args_info_full_help[1] ;
  args_info->version_help = gengetopt_args_info_full_help[2] ;
  args_info->verbose_help = gengetopt_args_info_full_help[3] ;
  args_info->verbose_min = 0;
  args_info->verbose_max = 0;
  args_info->debug_help = gengetopt_args_info_full_help[4] ;
  args_info->prec_list_help = gengetopt_args_info_full_help[5] ;
  args_info->ignore_help = gengetopt_args_info_full_help[6] ;
  args_info->ignore_min = 0;
  args_info->ignore_max = 0;
  args_info->binary_help = gengetopt_args_info_full_help[7] ;
  args_info->binary_min = 0;
  args_info->binary_max = 0;
  args_info->right_help = gengetopt_args_info_full_help[8] ;
  args_info->right_min = 0;
  args_info->right_max = 0;
  args_info->unary_help = gengetopt_args_info_full_help[9] ;
  args_info->unary_min = 0;
  args_info->unary_max = 0;
  args_info->postfix_help = gengetopt_args_info_full_help[10] ;
  args_info->postfix_min = 0;
  args_info->postfix_max = 0;
  args_info->item_help = gengetopt_args_info_full_help[11] ;
  args_info->item_min = 0;
  args_info->item_max = 0;
  args_info->brace_help = gengetopt_args_info_full_help[12] ;
  args_info->brace_min = 0;
  args_info->brace_max = 0;
  args_info->list_token_help = gengetopt_args_info_full_help[13] ;
  args_info->list_classes_help = gengetopt_args_info_full_help[14] ;
  args_info->scan_only_help = gengetopt_args_info_full_help[15] ;
  args_info->scanner_help = gengetopt_args_info_full_help[16] ;
  args_info->scanner_min = 0;
  args_info->scanner_max = 0;
  args_info->stdin_tty_help = gengetopt_args_info_full_help[17] ;
  args_info->outfile_help = gengetopt_args_info_full_help[19] ;
  args_info->input_encoding_help = gengetopt_args_info_full_help[20] ;
  args_info->input_encoding_min = 0;
  args_info->input_encoding_max = 0;
  args_info->indent_help = gengetopt_args_info_full_help[21] ;
  args_info->indent_unit_help = gengetopt_args_info_full_help[22] ;
  args_info->indent_unit_min = 0;
  args_info->indent_unit_max = 0;
  args_info->newline_as_br_help = gengetopt_args_info_full_help[23] ;
  args_info->newline_as_entity_help = gengetopt_args_info_full_help[24] ;
  args_info->merged_help = gengetopt_args_info_full_help[25] ;
  args_info->strict_help = gengetopt_args_info_full_help[26] ;
  args_info->loose_help = gengetopt_args_info_full_help[27] ;
  args_info->null_help = gengetopt_args_info_full_help[28] ;
  args_info->sparse_help = gengetopt_args_info_full_help[29] ;
  args_info->write_xml_declaration_help = gengetopt_args_info_full_help[30] ;
  args_info->write_bom_help = gengetopt_args_info_full_help[31] ;
  args_info->output_mode_help = gengetopt_args_info_full_help[32] ;
  args_info->matlab_help = gengetopt_args_info_full_help[33] ;
  args_info->json_help = gengetopt_args_info_full_help[34] ;
  args_info->xml_help = gengetopt_args_info_full_help[35] ;
  args_info->noignore_help = gengetopt_args_info_full_help[36] ;
  args_info->write_recursive_help = gengetopt_args_info_full_help[37] ;
  args_info->src_info_help = gengetopt_args_info_full_help[38] ;
  args_info->attribute_line_help = gengetopt_args_info_full_help[39] ;
  args_info->attribute_column_help = gengetopt_args_info_full_help[40] ;
  args_info->attribute_char_help = gengetopt_args_info_full_help[41] ;
  args_info->attribute_precedence_help = gengetopt_args_info_full_help[42] ;
  args_info->attribute_code_help = gengetopt_args_info_full_help[43] ;
  args_info->attribute_mode_help = gengetopt_args_info_full_help[44] ;
  args_info->attribute_type_help = gengetopt_args_info_full_help[45] ;
  args_info->attribute_id_help = gengetopt_args_info_full_help[46] ;
  args_info->element_ca_steps_help = gengetopt_args_info_full_help[47] ;
  args_info->element_scanner_help = gengetopt_args_info_full_help[48] ;
  args_info->element_parser_help = gengetopt_args_info_full_help[49] ;
  args_info->element_treewriter_help = gengetopt_args_info_full_help[50] ;
  args_info->include_config_help = gengetopt_args_info_full_help[52] ;
  
}

void
cmdline_parser_print_version (void)
{
  printf ("%s %s\n",
     (strlen(CMDLINE_PARSER_PACKAGE_NAME) ? CMDLINE_PARSER_PACKAGE_NAME : CMDLINE_PARSER_PACKAGE),
     CMDLINE_PARSER_VERSION);

  if (strlen(gengetopt_args_info_versiontext) > 0)
    printf("\n%s\n", gengetopt_args_info_versiontext);
}

static void print_help_common(void)
{
	size_t len_purpose = strlen(gengetopt_args_info_purpose);
	size_t len_usage = strlen(gengetopt_args_info_usage);

	if (len_usage > 0) {
		printf("%s\n", gengetopt_args_info_usage);
	}
	if (len_purpose > 0) {
		printf("%s\n", gengetopt_args_info_purpose);
	}

	if (len_usage || len_purpose) {
		printf("\n");
	}

	if (strlen(gengetopt_args_info_description) > 0) {
		printf("%s\n\n", gengetopt_args_info_description);
	}
}

void
cmdline_parser_print_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_help[i])
    printf("%s\n", gengetopt_args_info_help[i++]);
}

void
cmdline_parser_print_full_help (void)
{
  int i = 0;
  print_help_common();
  while (gengetopt_args_info_full_help[i])
    printf("%s\n", gengetopt_args_info_full_help[i++]);
}

void
cmdline_parser_init (struct gengetopt_args_info *args_info)
{
  clear_given (args_info);
  clear_args (args_info);
  init_args_info (args_info);

  args_info->inputs = 0;
  args_info->inputs_num = 0;
}

void
cmdline_parser_params_init(struct cmdline_parser_params *params)
{
  if (params)
    { 
      params->override = 0;
      params->initialize = 1;
      params->check_required = 1;
      params->check_ambiguity = 0;
      params->print_errors = 1;
    }
}

struct cmdline_parser_params *
cmdline_parser_params_create(void)
{
  struct cmdline_parser_params *params = 
    (struct cmdline_parser_params *)malloc(sizeof(struct cmdline_parser_params));
  cmdline_parser_params_init(params);  
  return params;
}

static void
free_string_field (char **s)
{
  if (*s)
    {
      free (*s);
      *s = 0;
    }
}

/** @brief generic value variable */
union generic_value {
    char *string_arg;
    const char *default_string_arg;
};

/** @brief holds temporary values for multiple options */
struct generic_list
{
  union generic_value arg;
  char *orig;
  struct generic_list *next;
};

/**
 * @brief add a node at the head of the list 
 */
static void add_node(struct generic_list **list) {
  struct generic_list *new_node = (struct generic_list *) malloc (sizeof (struct generic_list));
  new_node->next = *list;
  *list = new_node;
  new_node->arg.string_arg = 0;
  new_node->orig = 0;
}


static void
free_multiple_string_field(unsigned int len, char ***arg, char ***orig)
{
  unsigned int i;
  if (*arg) {
    for (i = 0; i < len; ++i)
      {
        free_string_field(&((*arg)[i]));
        free_string_field(&((*orig)[i]));
      }
    free_string_field(&((*arg)[0])); /* free default string */

    free (*arg);
    *arg = 0;
    free (*orig);
    *orig = 0;
  }
}

static void
cmdline_parser_release (struct gengetopt_args_info *args_info)
{
  unsigned int i;
  free_multiple_string_field (args_info->verbose_given, &(args_info->verbose_arg), &(args_info->verbose_orig));
  free_string_field (&(args_info->prec_list_arg));
  free_string_field (&(args_info->prec_list_orig));
  free_multiple_string_field (args_info->ignore_given, &(args_info->ignore_arg), &(args_info->ignore_orig));
  free_multiple_string_field (args_info->binary_given, &(args_info->binary_arg), &(args_info->binary_orig));
  free_multiple_string_field (args_info->right_given, &(args_info->right_arg), &(args_info->right_orig));
  free_multiple_string_field (args_info->unary_given, &(args_info->unary_arg), &(args_info->unary_orig));
  free_multiple_string_field (args_info->postfix_given, &(args_info->postfix_arg), &(args_info->postfix_orig));
  free_multiple_string_field (args_info->item_given, &(args_info->item_arg), &(args_info->item_orig));
  free_multiple_string_field (args_info->brace_given, &(args_info->brace_arg), &(args_info->brace_orig));
  free_multiple_string_field (args_info->scanner_given, &(args_info->scanner_arg), &(args_info->scanner_orig));
  free_string_field (&(args_info->outfile_arg));
  free_string_field (&(args_info->outfile_orig));
  free_multiple_string_field (args_info->input_encoding_given, &(args_info->input_encoding_arg), &(args_info->input_encoding_orig));
  free_multiple_string_field (args_info->indent_unit_given, &(args_info->indent_unit_arg), &(args_info->indent_unit_orig));
  free_string_field (&(args_info->null_arg));
  free_string_field (&(args_info->null_orig));
  free_string_field (&(args_info->output_mode_arg));
  free_string_field (&(args_info->output_mode_orig));
  
  
  for (i = 0; i < args_info->inputs_num; ++i)
    free (args_info->inputs [i]);

  if (args_info->inputs_num)
    free (args_info->inputs);

  clear_given (args_info);
}


static void
write_into_file(FILE *outfile, const char *opt, const char *arg, const char *values[])
{
  FIX_UNUSED (values);
  if (arg) {
    fprintf(outfile, "%s=\"%s\"\n", opt, arg);
  } else {
    fprintf(outfile, "%s\n", opt);
  }
}

static void
write_multiple_into_file(FILE *outfile, int len, const char *opt, char **arg, const char *values[])
{
  int i;
  
  for (i = 0; i < len; ++i)
    write_into_file(outfile, opt, (arg ? arg[i] : 0), values);
}

int
cmdline_parser_dump(FILE *outfile, struct gengetopt_args_info *args_info)
{
  int i = 0;

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot dump options to stream\n", CMDLINE_PARSER_PACKAGE);
      return EXIT_FAILURE;
    }

  if (args_info->help_given)
    write_into_file(outfile, "help", 0, 0 );
  if (args_info->full_help_given)
    write_into_file(outfile, "full-help", 0, 0 );
  if (args_info->version_given)
    write_into_file(outfile, "version", 0, 0 );
  write_multiple_into_file(outfile, args_info->verbose_given, "verbose", args_info->verbose_orig, 0);
  if (args_info->debug_given)
    write_into_file(outfile, "debug", 0, 0 );
  if (args_info->prec_list_given)
    write_into_file(outfile, "prec-list", args_info->prec_list_orig, 0);
  write_multiple_into_file(outfile, args_info->ignore_given, "ignore", args_info->ignore_orig, 0);
  write_multiple_into_file(outfile, args_info->binary_given, "binary", args_info->binary_orig, 0);
  write_multiple_into_file(outfile, args_info->right_given, "right", args_info->right_orig, 0);
  write_multiple_into_file(outfile, args_info->unary_given, "unary", args_info->unary_orig, 0);
  write_multiple_into_file(outfile, args_info->postfix_given, "postfix", args_info->postfix_orig, 0);
  write_multiple_into_file(outfile, args_info->item_given, "item", args_info->item_orig, 0);
  write_multiple_into_file(outfile, args_info->brace_given, "brace", args_info->brace_orig, 0);
  if (args_info->list_token_given)
    write_into_file(outfile, "list-token", 0, 0 );
  if (args_info->list_classes_given)
    write_into_file(outfile, "list-classes", 0, 0 );
  if (args_info->scan_only_given)
    write_into_file(outfile, "scan-only", 0, 0 );
  write_multiple_into_file(outfile, args_info->scanner_given, "scanner", args_info->scanner_orig, 0);
  if (args_info->stdin_tty_given)
    write_into_file(outfile, "stdin-tty", 0, 0 );
  if (args_info->outfile_given)
    write_into_file(outfile, "outfile", args_info->outfile_orig, 0);
  write_multiple_into_file(outfile, args_info->input_encoding_given, "input-encoding", args_info->input_encoding_orig, 0);
  if (args_info->indent_given)
    write_into_file(outfile, "indent", 0, 0 );
  write_multiple_into_file(outfile, args_info->indent_unit_given, "indent-unit", args_info->indent_unit_orig, 0);
  if (args_info->newline_as_br_given)
    write_into_file(outfile, "newline-as-br", 0, 0 );
  if (args_info->newline_as_entity_given)
    write_into_file(outfile, "newline-as-entity", 0, 0 );
  if (args_info->merged_given)
    write_into_file(outfile, "merged", 0, 0 );
  if (args_info->strict_given)
    write_into_file(outfile, "strict", 0, 0 );
  if (args_info->loose_given)
    write_into_file(outfile, "loose", 0, 0 );
  if (args_info->null_given)
    write_into_file(outfile, "null", args_info->null_orig, 0);
  if (args_info->sparse_given)
    write_into_file(outfile, "sparse", 0, 0 );
  if (args_info->write_xml_declaration_given)
    write_into_file(outfile, "write-xml-declaration", 0, 0 );
  if (args_info->write_bom_given)
    write_into_file(outfile, "write-bom", 0, 0 );
  if (args_info->output_mode_given)
    write_into_file(outfile, "output-mode", args_info->output_mode_orig, 0);
  if (args_info->matlab_given)
    write_into_file(outfile, "matlab", 0, 0 );
  if (args_info->json_given)
    write_into_file(outfile, "json", 0, 0 );
  if (args_info->xml_given)
    write_into_file(outfile, "xml", 0, 0 );
  if (args_info->noignore_given)
    write_into_file(outfile, "noignore", 0, 0 );
  if (args_info->write_recursive_given)
    write_into_file(outfile, "write-recursive", 0, 0 );
  if (args_info->src_info_given)
    write_into_file(outfile, "src-info", 0, 0 );
  if (args_info->attribute_line_given)
    write_into_file(outfile, "attribute-line", 0, 0 );
  if (args_info->attribute_column_given)
    write_into_file(outfile, "attribute-column", 0, 0 );
  if (args_info->attribute_char_given)
    write_into_file(outfile, "attribute-char", 0, 0 );
  if (args_info->attribute_precedence_given)
    write_into_file(outfile, "attribute-precedence", 0, 0 );
  if (args_info->attribute_code_given)
    write_into_file(outfile, "attribute-code", 0, 0 );
  if (args_info->attribute_mode_given)
    write_into_file(outfile, "attribute-mode", 0, 0 );
  if (args_info->attribute_type_given)
    write_into_file(outfile, "attribute-type", 0, 0 );
  if (args_info->attribute_id_given)
    write_into_file(outfile, "attribute-id", 0, 0 );
  if (args_info->element_ca_steps_given)
    write_into_file(outfile, "element-ca-steps", 0, 0 );
  if (args_info->element_scanner_given)
    write_into_file(outfile, "element-scanner", 0, 0 );
  if (args_info->element_parser_given)
    write_into_file(outfile, "element-parser", 0, 0 );
  if (args_info->element_treewriter_given)
    write_into_file(outfile, "element-treewriter", 0, 0 );
  if (args_info->include_config_given)
    write_into_file(outfile, "include-config", 0, 0 );
  

  i = EXIT_SUCCESS;
  return i;
}

int
cmdline_parser_file_save(const char *filename, struct gengetopt_args_info *args_info)
{
  FILE *outfile;
  int i = 0;

  outfile = fopen(filename, "w");

  if (!outfile)
    {
      fprintf (stderr, "%s: cannot open file for writing: %s\n", CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  i = cmdline_parser_dump(outfile, args_info);
  fclose (outfile);

  return i;
}

void
cmdline_parser_free (struct gengetopt_args_info *args_info)
{
  cmdline_parser_release (args_info);
}

/** @brief replacement of strdup, which is not standard */
char *
gengetopt_strdup (const char *s)
{
  char *result = 0;
  if (!s)
    return result;

  result = (char*)malloc(strlen(s) + 1);
  if (result == (char*)0)
    return (char*)0;
  strcpy(result, s);
  return result;
}

static char *
get_multiple_arg_token(const char *arg)
{
  const char *tok;
  char *ret;
  size_t len, num_of_escape, i, j;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');
  num_of_escape = 0;

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
          ++num_of_escape;
        }
      else
        break;
    }

  if (tok)
    len = (size_t)(tok - arg + 1);
  else
    len = strlen (arg) + 1;

  len -= num_of_escape;

  ret = (char *) malloc (len);

  i = 0;
  j = 0;
  while (arg[i] && (j < len-1))
    {
      if (arg[i] == '\\' && 
	  arg[ i + 1 ] && 
	  arg[ i + 1 ] == ',')
        ++i;

      ret[j++] = arg[i++];
    }

  ret[len-1] = '\0';

  return ret;
}

static const char *
get_multiple_arg_token_next(const char *arg)
{
  const char *tok;

  if (!arg)
    return 0;

  tok = strchr (arg, ',');

  /* make sure it is not escaped */
  while (tok)
    {
      if (*(tok-1) == '\\')
        {
          /* find the next one */
          tok = strchr (tok+1, ',');
        }
      else
        break;
    }

  if (! tok || strlen(tok) == 1)
    return 0;

  return tok+1;
}

static int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc);

int
check_multiple_option_occurrences(const char *prog_name, unsigned int option_given, unsigned int min, unsigned int max, const char *option_desc)
{
  int error_occurred = 0;

  if (option_given && (min > 0 || max > 0))
    {
      if (min > 0 && max > 0)
        {
          if (min == max)
            {
              /* specific occurrences */
              if (option_given != (unsigned int) min)
                {
                  fprintf (stderr, "%s: %s option occurrences must be %d\n",
                    prog_name, option_desc, min);
                  error_occurred = 1;
                }
            }
          else if (option_given < (unsigned int) min
                || option_given > (unsigned int) max)
            {
              /* range occurrences */
              fprintf (stderr, "%s: %s option occurrences must be between %d and %d\n",
                prog_name, option_desc, min, max);
              error_occurred = 1;
            }
        }
      else if (min > 0)
        {
          /* at least check */
          if (option_given < min)
            {
              fprintf (stderr, "%s: %s option occurrences must be at least %d\n",
                prog_name, option_desc, min);
              error_occurred = 1;
            }
        }
      else if (max > 0)
        {
          /* at most check */
          if (option_given > max)
            {
              fprintf (stderr, "%s: %s option occurrences must be at most %d\n",
                prog_name, option_desc, max);
              error_occurred = 1;
            }
        }
    }
    
  return error_occurred;
}
int
cmdline_parser (int argc, char **argv, struct gengetopt_args_info *args_info)
{
  return cmdline_parser2 (argc, argv, args_info, 0, 1, 1);
}

int
cmdline_parser_ext (int argc, char **argv, struct gengetopt_args_info *args_info,
                   struct cmdline_parser_params *params)
{
  int result;
  result = cmdline_parser_internal (argc, argv, args_info, params, 0);

  return result;
}

int
cmdline_parser2 (int argc, char **argv, struct gengetopt_args_info *args_info, int override, int initialize, int check_required)
{
  int result;
  struct cmdline_parser_params params;
  
  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;

  result = cmdline_parser_internal (argc, argv, args_info, &params, 0);

  return result;
}

int
cmdline_parser_required (struct gengetopt_args_info *args_info, const char *prog_name)
{
  int result = EXIT_SUCCESS;

  if (cmdline_parser_required2(args_info, prog_name, 0) > 0)
    result = EXIT_FAILURE;

  return result;
}

int
cmdline_parser_required2 (struct gengetopt_args_info *args_info, const char *prog_name, const char *additional_error)
{
  int error_occurred = 0;
  FIX_UNUSED (additional_error);

  /* checks for required options */
  if (check_multiple_option_occurrences(prog_name, args_info->verbose_given, args_info->verbose_min, args_info->verbose_max, "'--verbose' ('-V')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->ignore_given, args_info->ignore_min, args_info->ignore_max, "'--ignore' ('-i')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->binary_given, args_info->binary_min, args_info->binary_max, "'--binary' ('-b')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->right_given, args_info->right_min, args_info->right_max, "'--right' ('-r')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->unary_given, args_info->unary_min, args_info->unary_max, "'--unary' ('-u')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->postfix_given, args_info->postfix_min, args_info->postfix_max, "'--postfix'"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->item_given, args_info->item_min, args_info->item_max, "'--item' ('-I')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->brace_given, args_info->brace_min, args_info->brace_max, "'--brace' ('-B')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->scanner_given, args_info->scanner_min, args_info->scanner_max, "'--scanner' ('-S')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->input_encoding_given, args_info->input_encoding_min, args_info->input_encoding_max, "'--input-encoding' ('-e')"))
     error_occurred = 1;
  
  if (check_multiple_option_occurrences(prog_name, args_info->indent_unit_given, args_info->indent_unit_min, args_info->indent_unit_max, "'--indent-unit'"))
     error_occurred = 1;
  
  
  /* checks for dependences among options */

  return error_occurred;
}


static char *package_name = 0;

/**
 * @brief updates an option
 * @param field the generic pointer to the field to update
 * @param orig_field the pointer to the orig field
 * @param field_given the pointer to the number of occurrence of this option
 * @param prev_given the pointer to the number of occurrence already seen
 * @param value the argument for this option (if null no arg was specified)
 * @param possible_values the possible values for this option (if specified)
 * @param default_value the default value (in case the option only accepts fixed values)
 * @param arg_type the type of this option
 * @param check_ambiguity @see cmdline_parser_params.check_ambiguity
 * @param override @see cmdline_parser_params.override
 * @param no_free whether to free a possible previous value
 * @param multiple_option whether this is a multiple option
 * @param long_opt the corresponding long option
 * @param short_opt the corresponding short option (or '-' if none)
 * @param additional_error possible further error specification
 */
static
int update_arg(void *field, char **orig_field,
               unsigned int *field_given, unsigned int *prev_given, 
               char *value, const char *possible_values[],
               const char *default_value,
               cmdline_parser_arg_type arg_type,
               int check_ambiguity, int override,
               int no_free, int multiple_option,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  char *stop_char = 0;
  const char *val = value;
  int found;
  char **string_field;
  FIX_UNUSED (field);

  stop_char = 0;
  found = 0;

  if (!multiple_option && prev_given && (*prev_given || (check_ambiguity && *field_given)))
    {
      if (short_opt != '-')
        fprintf (stderr, "%s: `--%s' (`-%c') option given more than once%s\n", 
               package_name, long_opt, short_opt,
               (additional_error ? additional_error : ""));
      else
        fprintf (stderr, "%s: `--%s' option given more than once%s\n", 
               package_name, long_opt,
               (additional_error ? additional_error : ""));
      return 1; /* failure */
    }

  FIX_UNUSED (default_value);
    
  if (field_given && *field_given && ! override)
    return 0;
  if (prev_given)
    (*prev_given)++;
  if (field_given)
    (*field_given)++;
  if (possible_values)
    val = possible_values[found];

  switch(arg_type) {
  case ARG_FLAG:
    *((int *)field) = !*((int *)field);
    break;
  case ARG_STRING:
    if (val) {
      string_field = (char **)field;
      if (!no_free && *string_field)
        free (*string_field); /* free previous string */
      *string_field = gengetopt_strdup (val);
    }
    break;
  default:
    break;
  };

	FIX_UNUSED(stop_char);
	
  /* store the original value */
  switch(arg_type) {
  case ARG_NO:
  case ARG_FLAG:
    break;
  default:
    if (value && orig_field) {
      if (no_free) {
        *orig_field = value;
      } else {
        if (*orig_field)
          free (*orig_field); /* free previous string */
        *orig_field = gengetopt_strdup (value);
      }
    }
  };

  return 0; /* OK */
}

/**
 * @brief store information about a multiple option in a temporary list
 * @param list where to (temporarily) store multiple options
 */
static
int update_multiple_arg_temp(struct generic_list **list,
               unsigned int *prev_given, const char *val,
               const char *possible_values[], const char *default_value,
               cmdline_parser_arg_type arg_type,
               const char *long_opt, char short_opt,
               const char *additional_error)
{
  /* store single arguments */
  char *multi_token;
  const char *multi_next;

  if (arg_type == ARG_NO) {
    (*prev_given)++;
    return 0; /* OK */
  }

  multi_token = get_multiple_arg_token(val);
  multi_next = get_multiple_arg_token_next (val);

  while (1)
    {
      add_node (list);
      if (update_arg((void *)&((*list)->arg), &((*list)->orig), 0,
          prev_given, multi_token, possible_values, default_value, 
          arg_type, 0, 1, 1, 1, long_opt, short_opt, additional_error)) {
        if (multi_token) free(multi_token);
        return 1; /* failure */
      }

      if (multi_next)
        {
          multi_token = get_multiple_arg_token(multi_next);
          multi_next = get_multiple_arg_token_next (multi_next);
        }
      else
        break;
    }

  return 0; /* OK */
}

/**
 * @brief free the passed list (including possible string argument)
 */
static
void free_list(struct generic_list *list, short string_arg)
{
  if (list) {
    struct generic_list *tmp;
    while (list)
      {
        tmp = list;
        if (string_arg && list->arg.string_arg)
          free (list->arg.string_arg);
        if (list->orig)
          free (list->orig);
        list = list->next;
        free (tmp);
      }
  }
}

/**
 * @brief updates a multiple option starting from the passed list
 */
static
void update_multiple_arg(void *field, char ***orig_field,
               unsigned int field_given, unsigned int prev_given, union generic_value *default_value,
               cmdline_parser_arg_type arg_type,
               struct generic_list *list)
{
  int i;
  struct generic_list *tmp;

  if (prev_given && list) {
    *orig_field = (char **) realloc (*orig_field, (field_given + prev_given) * sizeof (char *));

    switch(arg_type) {
    case ARG_STRING:
      *((char ***)field) = (char **)realloc (*((char ***)field), (field_given + prev_given) * sizeof (char *)); break;
    default:
      break;
    };
    
    for (i = (prev_given - 1); i >= 0; --i)
      {
        tmp = list;
        
        switch(arg_type) {
        case ARG_STRING:
          (*((char ***)field))[i + field_given] = tmp->arg.string_arg; break;
        default:
          break;
        }        
        (*orig_field) [i + field_given] = list->orig;
        list = list->next;
        free (tmp);
      }
  } else { /* set the default value */
    if (default_value && ! field_given) {
      switch(arg_type) {
      case ARG_STRING:
        if (! *((char ***)field)) {
          *((char ***)field) = (char **)malloc (sizeof (char *));
          (*((char ***)field))[0] = gengetopt_strdup(default_value->string_arg);
        }
        break;
      default: break;
      }
      if (!(*orig_field)) {
        *orig_field = (char **) malloc (sizeof (char *));
        (*orig_field)[0] = 0;
      }
    }
  }
}

int
cmdline_parser_internal (
  int argc, char **argv, struct gengetopt_args_info *args_info,
                        struct cmdline_parser_params *params, const char *additional_error)
{
  int c;	/* Character of the parsed option.  */
  union generic_value multiple_default_value;

  struct generic_list * verbose_list = NULL;
  struct generic_list * ignore_list = NULL;
  struct generic_list * binary_list = NULL;
  struct generic_list * right_list = NULL;
  struct generic_list * unary_list = NULL;
  struct generic_list * postfix_list = NULL;
  struct generic_list * item_list = NULL;
  struct generic_list * brace_list = NULL;
  struct generic_list * scanner_list = NULL;
  struct generic_list * input_encoding_list = NULL;
  struct generic_list * indent_unit_list = NULL;
  int error_occurred = 0;
  struct gengetopt_args_info local_args_info;
  
  int override;
  int initialize;
  int check_required;
  int check_ambiguity;
  
  package_name = argv[0];
  
  /* TODO: Why is this here? It is not used anywhere. */
  override = params->override;
  FIX_UNUSED(override);

  initialize = params->initialize;
  check_required = params->check_required;

  /* TODO: Why is this here? It is not used anywhere. */
  check_ambiguity = params->check_ambiguity;
  FIX_UNUSED(check_ambiguity);

  if (initialize)
    cmdline_parser_init (args_info);

  cmdline_parser_init (&local_args_info);

  optarg = 0;
  optind = 0;
  opterr = params->print_errors;
  optopt = '?';

  while (1)
    {
      int option_index = 0;

      static struct option long_options[] = {
        { "help",	0, NULL, 'h' },
        { "full-help",	0, NULL, 0 },
        { "version",	0, NULL, 0 },
        { "verbose",	2, NULL, 'V' },
        { "debug",	0, NULL, 0 },
        { "prec-list",	1, NULL, 'p' },
        { "ignore",	1, NULL, 'i' },
        { "binary",	1, NULL, 'b' },
        { "right",	1, NULL, 'r' },
        { "unary",	1, NULL, 'u' },
        { "postfix",	1, NULL, 0 },
        { "item",	1, NULL, 'I' },
        { "brace",	1, NULL, 'B' },
        { "list-token",	0, NULL, 'L' },
        { "list-classes",	0, NULL, 'T' },
        { "scan-only",	0, NULL, 's' },
        { "scanner",	1, NULL, 'S' },
        { "stdin-tty",	0, NULL, 0 },
        { "outfile",	1, NULL, 'o' },
        { "input-encoding",	1, NULL, 'e' },
        { "indent",	0, NULL, 0 },
        { "indent-unit",	1, NULL, 0 },
        { "newline-as-br",	0, NULL, 0 },
        { "newline-as-entity",	0, NULL, 0 },
        { "merged",	0, NULL, 'm' },
        { "strict",	0, NULL, 0 },
        { "loose",	0, NULL, 'l' },
        { "null",	1, NULL, 0 },
        { "sparse",	0, NULL, 'w' },
        { "write-xml-declaration",	0, NULL, 0 },
        { "write-bom",	0, NULL, 0 },
        { "output-mode",	1, NULL, 'O' },
        { "matlab",	0, NULL, 'M' },
        { "json",	0, NULL, 'J' },
        { "xml",	0, NULL, 'X' },
        { "noignore",	0, NULL, 'n' },
        { "write-recursive",	0, NULL, 0 },
        { "src-info",	0, NULL, 'g' },
        { "attribute-line",	0, NULL, 0 },
        { "attribute-column",	0, NULL, 0 },
        { "attribute-char",	0, NULL, 0 },
        { "attribute-precedence",	0, NULL, 0 },
        { "attribute-code",	0, NULL, 0 },
        { "attribute-mode",	0, NULL, 0 },
        { "attribute-type",	0, NULL, 0 },
        { "attribute-id",	0, NULL, 0 },
        { "element-ca-steps",	0, NULL, 0 },
        { "element-scanner",	0, NULL, 0 },
        { "element-parser",	0, NULL, 0 },
        { "element-treewriter",	0, NULL, 0 },
        { "include-config",	0, NULL, 'c' },
        { 0,  0, 0, 0 }
      };

      c = getopt_long (argc, argv, "hV::p:i:b:r:u:I:B:LTsS:o:e:mlwO:MJXngc", long_options, &option_index);

      if (c == -1) break;	/* Exit from `while (1)' loop.  */

      switch (c)
        {
        case 'h':	/* Print help and exit.  */
        
        
          if (update_arg( 0 , 
               0 , &(args_info->help_given),
              &(local_args_info.help_given), optarg, 0, 0, ARG_NO,
              check_ambiguity, override, 0, 0,
              "help", 'h',
              additional_error))
            goto failure;
          cmdline_parser_free (&local_args_info);
          return 0;
        
          break;
        case 'V':	/* Control messages by bit mask.  */
        
          if (update_multiple_arg_temp(&verbose_list, 
              &(local_args_info.verbose_given), optarg, 0, "error|warning", ARG_STRING,
              "verbose", 'V',
              additional_error))
            goto failure;
        
          break;
        case 'p':	/* Precedence file list.  */
        
        
          if (update_arg( (void *)&(args_info->prec_list_arg), 
               &(args_info->prec_list_orig), &(args_info->prec_list_given),
              &(local_args_info.prec_list_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "prec-list", 'p',
              additional_error))
            goto failure;
        
          break;
        case 'i':	/* Add an item to ignore.  */
        
          if (update_multiple_arg_temp(&ignore_list, 
              &(local_args_info.ignore_given), optarg, 0, 0, ARG_STRING,
              "ignore", 'i',
              additional_error))
            goto failure;
        
          break;
        case 'b':	/* Add a binary operator.  */
        
          if (update_multiple_arg_temp(&binary_list, 
              &(local_args_info.binary_given), optarg, 0, 0, ARG_STRING,
              "binary", 'b',
              additional_error))
            goto failure;
        
          break;
        case 'r':	/* Add a right associative operator.  */
        
          if (update_multiple_arg_temp(&right_list, 
              &(local_args_info.right_given), optarg, 0, 0, ARG_STRING,
              "right", 'r',
              additional_error))
            goto failure;
        
          break;
        case 'u':	/* Add a unary operator.  */
        
          if (update_multiple_arg_temp(&unary_list, 
              &(local_args_info.unary_given), optarg, 0, 0, ARG_STRING,
              "unary", 'u',
              additional_error))
            goto failure;
        
          break;
        case 'I':	/* Add an item.  */
        
          if (update_multiple_arg_temp(&item_list, 
              &(local_args_info.item_given), optarg, 0, 0, ARG_STRING,
              "item", 'I',
              additional_error))
            goto failure;
        
          break;
        case 'B':	/* Scope start and end token.  */
        
          if (update_multiple_arg_temp(&brace_list, 
              &(local_args_info.brace_given), optarg, 0, 0, ARG_STRING,
              "brace", 'B',
              additional_error))
            goto failure;
        
          break;
        case 'L':	/* List token types.  */
        
        
          if (update_arg((void *)&(args_info->list_token_flag), 0, &(args_info->list_token_given),
              &(local_args_info.list_token_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "list-token", 'L',
              additional_error))
            goto failure;
        
          break;
        case 'T':	/* List token classes.  */
        
        
          if (update_arg((void *)&(args_info->list_classes_flag), 0, &(args_info->list_classes_given),
              &(local_args_info.list_classes_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "list-classes", 'T',
              additional_error))
            goto failure;
        
          break;
        case 's':	/* Scan only, do not parse.  */
        
        
          if (update_arg((void *)&(args_info->scan_only_flag), 0, &(args_info->scan_only_given),
              &(local_args_info.scan_only_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "scan-only", 's',
              additional_error))
            goto failure;
        
          break;
        case 'S':	/* Select scanner class.  */
        
          if (update_multiple_arg_temp(&scanner_list, 
              &(local_args_info.scanner_given), optarg, 0, "strings", ARG_STRING,
              "scanner", 'S',
              additional_error))
            goto failure;
        
          break;
        case 'o':	/* Write output to file.  */
        
        
          if (update_arg( (void *)&(args_info->outfile_arg), 
               &(args_info->outfile_orig), &(args_info->outfile_given),
              &(local_args_info.outfile_given), optarg, 0, 0, ARG_STRING,
              check_ambiguity, override, 0, 0,
              "outfile", 'o',
              additional_error))
            goto failure;
        
          break;
        case 'e':	/* Input encoding.  */
        
          if (update_multiple_arg_temp(&input_encoding_list, 
              &(local_args_info.input_encoding_given), optarg, 0, "utf-8", ARG_STRING,
              "input-encoding", 'e',
              additional_error))
            goto failure;
        
          break;
        case 'm':	/* Collect children of equal operator chains, output all binary nodes in MERGED mode.  */
        
        
          if (update_arg((void *)&(args_info->merged_flag), 0, &(args_info->merged_given),
              &(local_args_info.merged_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "merged", 'm',
              additional_error))
            goto failure;
        
          break;
        case 'l':	/* Loose output mode: never write null elements.  */
        
        
          if (update_arg((void *)&(args_info->loose_flag), 0, &(args_info->loose_given),
              &(local_args_info.loose_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "loose", 'l',
              additional_error))
            goto failure;
        
          break;
        case 'w':	/* Safe some non-essential attributes, newlines and indents.  */
        
        
          if (update_arg((void *)&(args_info->sparse_flag), 0, &(args_info->sparse_given),
              &(local_args_info.sparse_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "sparse", 'w',
              additional_error))
            goto failure;
        
          break;
        case 'O':	/* Write output as normal (x) or alternative (y) XML, or (J)SON or (M)ATLAB code.  */
        
        
          if (update_arg( (void *)&(args_info->output_mode_arg), 
               &(args_info->output_mode_orig), &(args_info->output_mode_given),
              &(local_args_info.output_mode_given), optarg, 0, "y", ARG_STRING,
              check_ambiguity, override, 0, 0,
              "output-mode", 'O',
              additional_error))
            goto failure;
        
          break;
        case 'M':	/* Write output as MATLAB.  */
        
        
          if (update_arg((void *)&(args_info->matlab_flag), 0, &(args_info->matlab_given),
              &(local_args_info.matlab_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "matlab", 'M',
              additional_error))
            goto failure;
        
          break;
        case 'J':	/* Write output as JSON.  */
        
        
          if (update_arg((void *)&(args_info->json_flag), 0, &(args_info->json_given),
              &(local_args_info.json_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "json", 'J',
              additional_error))
            goto failure;
        
          break;
        case 'X':	/* Write output as XML.  */
        
        
          if (update_arg((void *)&(args_info->xml_flag), 0, &(args_info->xml_given),
              &(local_args_info.xml_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "xml", 'X',
              additional_error))
            goto failure;
        
          break;
        case 'n':	/* Skip ignore items.  */
        
        
          if (update_arg((void *)&(args_info->noignore_flag), 0, &(args_info->noignore_given),
              &(local_args_info.noignore_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "noignore", 'n',
              additional_error))
            goto failure;
        
          break;
        case 'g':	/* Emit source location attributes line, column, and character.  */
        
        
          if (update_arg((void *)&(args_info->src_info_flag), 0, &(args_info->src_info_given),
              &(local_args_info.src_info_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "src-info", 'g',
              additional_error))
            goto failure;
        
          break;
        case 'c':	/* Add configuration info to the output XML.  */
        
        
          if (update_arg((void *)&(args_info->include_config_flag), 0, &(args_info->include_config_given),
              &(local_args_info.include_config_given), optarg, 0, 0, ARG_FLAG,
              check_ambiguity, override, 1, 0, "include-config", 'c',
              additional_error))
            goto failure;
        
          break;

        case 0:	/* Long option with no short option */
          /* Print help, including hidden options, and exit.  */
          if (strcmp (long_options[option_index].name, "full-help") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->full_help_given),
                &(local_args_info.full_help_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "full-help", '-',
                additional_error))
              goto failure;
            cmdline_parser_free (&local_args_info);
            return 0;
          
          }
          /* Print version and exit.  */
          else if (strcmp (long_options[option_index].name, "version") == 0)
          {
          
          
            if (update_arg( 0 , 
                 0 , &(args_info->version_given),
                &(local_args_info.version_given), optarg, 0, 0, ARG_NO,
                check_ambiguity, override, 0, 0,
                "version", 'V',
                additional_error))
              goto failure;
            cmdline_parser_free (&local_args_info);
            return 0;
          
          }
          /* Enable debugging.  */
          else if (strcmp (long_options[option_index].name, "debug") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->debug_flag), 0, &(args_info->debug_given),
                &(local_args_info.debug_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "debug", '-',
                additional_error))
              goto failure;
          
          }
          /* Add a postfix operator.  */
          else if (strcmp (long_options[option_index].name, "postfix") == 0)
          {
          
            if (update_multiple_arg_temp(&postfix_list, 
                &(local_args_info.postfix_given), optarg, 0, 0, ARG_STRING,
                "postfix", '-',
                additional_error))
              goto failure;
          
          }
          /* Read from stdin, even if it is a TTY.  */
          else if (strcmp (long_options[option_index].name, "stdin-tty") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->stdin_tty_flag), 0, &(args_info->stdin_tty_given),
                &(local_args_info.stdin_tty_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "stdin-tty", '-',
                additional_error))
              goto failure;
          
          }
          /* Indent.  */
          else if (strcmp (long_options[option_index].name, "indent") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->indent_flag), 0, &(args_info->indent_given),
                &(local_args_info.indent_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "indent", '-',
                additional_error))
              goto failure;
          
          }
          /* Indentation unit.  */
          else if (strcmp (long_options[option_index].name, "indent-unit") == 0)
          {
          
            if (update_multiple_arg_temp(&indent_unit_list, 
                &(local_args_info.indent_unit_given), optarg, 0, " ", ARG_STRING,
                "indent-unit", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit newline text as ca:br element.  */
          else if (strcmp (long_options[option_index].name, "newline-as-br") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->newline_as_br_flag), 0, &(args_info->newline_as_br_given),
                &(local_args_info.newline_as_br_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "newline-as-br", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit newline text as &#xa; character entity.  */
          else if (strcmp (long_options[option_index].name, "newline-as-entity") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->newline_as_entity_flag), 0, &(args_info->newline_as_entity_given),
                &(local_args_info.newline_as_entity_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "newline-as-entity", '-',
                additional_error))
              goto failure;
          
          }
          /* Strict output mode: paren children always indicated by null elements.  */
          else if (strcmp (long_options[option_index].name, "strict") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->strict_flag), 0, &(args_info->strict_given),
                &(local_args_info.strict_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "strict", '-',
                additional_error))
              goto failure;
          
          }
          /* Null element name.  */
          else if (strcmp (long_options[option_index].name, "null") == 0)
          {
          
          
            if (update_arg( (void *)&(args_info->null_arg), 
                 &(args_info->null_orig), &(args_info->null_given),
                &(local_args_info.null_given), optarg, 0, 0, ARG_STRING,
                check_ambiguity, override, 0, 0,
                "null", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit XML declaration (with encoding).  */
          else if (strcmp (long_options[option_index].name, "write-xml-declaration") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->write_xml_declaration_flag), 0, &(args_info->write_xml_declaration_given),
                &(local_args_info.write_xml_declaration_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "write-xml-declaration", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit byte order mark (BOM) character.  */
          else if (strcmp (long_options[option_index].name, "write-bom") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->write_bom_flag), 0, &(args_info->write_bom_given),
                &(local_args_info.write_bom_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "write-bom", '-',
                additional_error))
              goto failure;
          
          }
          /* Recursive output writing.  */
          else if (strcmp (long_options[option_index].name, "write-recursive") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->write_recursive_flag), 0, &(args_info->write_recursive_given),
                &(local_args_info.write_recursive_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "write-recursive", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute line with source line.  */
          else if (strcmp (long_options[option_index].name, "attribute-line") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_line_flag), 0, &(args_info->attribute_line_given),
                &(local_args_info.attribute_line_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-line", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute column with source column.  */
          else if (strcmp (long_options[option_index].name, "attribute-column") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_column_flag), 0, &(args_info->attribute_column_given),
                &(local_args_info.attribute_column_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-column", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute column with source char.  */
          else if (strcmp (long_options[option_index].name, "attribute-char") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_char_flag), 0, &(args_info->attribute_char_given),
                &(local_args_info.attribute_char_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-char", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute precedence with token precedence.  */
          else if (strcmp (long_options[option_index].name, "attribute-precedence") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_precedence_flag), 0, &(args_info->attribute_precedence_given),
                &(local_args_info.attribute_precedence_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-precedence", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute code with internal token code.  */
          else if (strcmp (long_options[option_index].name, "attribute-code") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_code_flag), 0, &(args_info->attribute_code_given),
                &(local_args_info.attribute_code_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-code", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute mode with token mode.  */
          else if (strcmp (long_options[option_index].name, "attribute-mode") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_mode_flag), 0, &(args_info->attribute_mode_given),
                &(local_args_info.attribute_mode_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-mode", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute type with token type.  */
          else if (strcmp (long_options[option_index].name, "attribute-type") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_type_flag), 0, &(args_info->attribute_type_given),
                &(local_args_info.attribute_type_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-type", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit attribute id with token id.  */
          else if (strcmp (long_options[option_index].name, "attribute-id") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->attribute_id_flag), 0, &(args_info->attribute_id_given),
                &(local_args_info.attribute_id_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "attribute-id", '-',
                additional_error))
              goto failure;
          
          }
          /* Emit element ca:steps.  */
          else if (strcmp (long_options[option_index].name, "element-ca-steps") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->element_ca_steps_flag), 0, &(args_info->element_ca_steps_given),
                &(local_args_info.element_ca_steps_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "element-ca-steps", '-',
                additional_error))
              goto failure;
          
          }
          /* Add scanner configuration info to the output XML.  */
          else if (strcmp (long_options[option_index].name, "element-scanner") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->element_scanner_flag), 0, &(args_info->element_scanner_given),
                &(local_args_info.element_scanner_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "element-scanner", '-',
                additional_error))
              goto failure;
          
          }
          /* Add parser configuration info to the output XML.  */
          else if (strcmp (long_options[option_index].name, "element-parser") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->element_parser_flag), 0, &(args_info->element_parser_given),
                &(local_args_info.element_parser_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "element-parser", '-',
                additional_error))
              goto failure;
          
          }
          /* Add treewriter configuration info to the output XML.  */
          else if (strcmp (long_options[option_index].name, "element-treewriter") == 0)
          {
          
          
            if (update_arg((void *)&(args_info->element_treewriter_flag), 0, &(args_info->element_treewriter_given),
                &(local_args_info.element_treewriter_given), optarg, 0, 0, ARG_FLAG,
                check_ambiguity, override, 1, 0, "element-treewriter", '-',
                additional_error))
              goto failure;
          
          }
          
          break;
        case '?':	/* Invalid option.  */
          /* `getopt_long' already printed an error message.  */
          goto failure;

        default:	/* bug: option not considered.  */
          fprintf (stderr, "%s: option unknown: %c%s\n", CMDLINE_PARSER_PACKAGE, c, (additional_error ? additional_error : ""));
          abort ();
        } /* switch */
    } /* while */


  multiple_default_value.default_string_arg = "error|warning";
  update_multiple_arg((void *)&(args_info->verbose_arg),
    &(args_info->verbose_orig), args_info->verbose_given,
    local_args_info.verbose_given, &multiple_default_value,
    ARG_STRING, verbose_list);
  update_multiple_arg((void *)&(args_info->ignore_arg),
    &(args_info->ignore_orig), args_info->ignore_given,
    local_args_info.ignore_given, 0,
    ARG_STRING, ignore_list);
  update_multiple_arg((void *)&(args_info->binary_arg),
    &(args_info->binary_orig), args_info->binary_given,
    local_args_info.binary_given, 0,
    ARG_STRING, binary_list);
  update_multiple_arg((void *)&(args_info->right_arg),
    &(args_info->right_orig), args_info->right_given,
    local_args_info.right_given, 0,
    ARG_STRING, right_list);
  update_multiple_arg((void *)&(args_info->unary_arg),
    &(args_info->unary_orig), args_info->unary_given,
    local_args_info.unary_given, 0,
    ARG_STRING, unary_list);
  update_multiple_arg((void *)&(args_info->postfix_arg),
    &(args_info->postfix_orig), args_info->postfix_given,
    local_args_info.postfix_given, 0,
    ARG_STRING, postfix_list);
  update_multiple_arg((void *)&(args_info->item_arg),
    &(args_info->item_orig), args_info->item_given,
    local_args_info.item_given, 0,
    ARG_STRING, item_list);
  update_multiple_arg((void *)&(args_info->brace_arg),
    &(args_info->brace_orig), args_info->brace_given,
    local_args_info.brace_given, 0,
    ARG_STRING, brace_list);
  multiple_default_value.default_string_arg = "strings";
  update_multiple_arg((void *)&(args_info->scanner_arg),
    &(args_info->scanner_orig), args_info->scanner_given,
    local_args_info.scanner_given, &multiple_default_value,
    ARG_STRING, scanner_list);
  multiple_default_value.default_string_arg = "utf-8";
  update_multiple_arg((void *)&(args_info->input_encoding_arg),
    &(args_info->input_encoding_orig), args_info->input_encoding_given,
    local_args_info.input_encoding_given, &multiple_default_value,
    ARG_STRING, input_encoding_list);
  multiple_default_value.default_string_arg = " ";
  update_multiple_arg((void *)&(args_info->indent_unit_arg),
    &(args_info->indent_unit_orig), args_info->indent_unit_given,
    local_args_info.indent_unit_given, &multiple_default_value,
    ARG_STRING, indent_unit_list);

  args_info->verbose_given += local_args_info.verbose_given;
  local_args_info.verbose_given = 0;
  args_info->ignore_given += local_args_info.ignore_given;
  local_args_info.ignore_given = 0;
  args_info->binary_given += local_args_info.binary_given;
  local_args_info.binary_given = 0;
  args_info->right_given += local_args_info.right_given;
  local_args_info.right_given = 0;
  args_info->unary_given += local_args_info.unary_given;
  local_args_info.unary_given = 0;
  args_info->postfix_given += local_args_info.postfix_given;
  local_args_info.postfix_given = 0;
  args_info->item_given += local_args_info.item_given;
  local_args_info.item_given = 0;
  args_info->brace_given += local_args_info.brace_given;
  local_args_info.brace_given = 0;
  args_info->scanner_given += local_args_info.scanner_given;
  local_args_info.scanner_given = 0;
  args_info->input_encoding_given += local_args_info.input_encoding_given;
  local_args_info.input_encoding_given = 0;
  args_info->indent_unit_given += local_args_info.indent_unit_given;
  local_args_info.indent_unit_given = 0;
  
  if (check_required)
    {
      error_occurred += cmdline_parser_required2 (args_info, argv[0], additional_error);
    }

  cmdline_parser_release (&local_args_info);

  if ( error_occurred )
    return (EXIT_FAILURE);

  if (optind < argc)
    {
      int i = 0 ;
      int found_prog_name = 0;
      /* whether program name, i.e., argv[0], is in the remaining args
         (this may happen with some implementations of getopt,
          but surely not with the one included by gengetopt) */

      i = optind;
      while (i < argc)
        if (argv[i++] == argv[0]) {
          found_prog_name = 1;
          break;
        }
      i = 0;

      args_info->inputs_num = argc - optind - found_prog_name;
      args_info->inputs =
        (char **)(malloc ((args_info->inputs_num)*sizeof(char *))) ;
      while (optind < argc)
        if (argv[optind++] != argv[0])
          args_info->inputs[ i++ ] = gengetopt_strdup (argv[optind-1]) ;
    }

  return 0;

failure:
  free_list (verbose_list, 1 );
  free_list (ignore_list, 1 );
  free_list (binary_list, 1 );
  free_list (right_list, 1 );
  free_list (unary_list, 1 );
  free_list (postfix_list, 1 );
  free_list (item_list, 1 );
  free_list (brace_list, 1 );
  free_list (scanner_list, 1 );
  free_list (input_encoding_list, 1 );
  free_list (indent_unit_list, 1 );
  
  cmdline_parser_release (&local_args_info);
  return (EXIT_FAILURE);
}

#ifndef CONFIG_FILE_LINE_SIZE
#define CONFIG_FILE_LINE_SIZE 2048
#endif
#define ADDITIONAL_ERROR " in configuration file "

#define CONFIG_FILE_LINE_BUFFER_SIZE (CONFIG_FILE_LINE_SIZE+3)
/* 3 is for "--" and "=" */

static int
_cmdline_parser_configfile (const char *filename, int *my_argc)
{
  FILE* file;
  char my_argv[CONFIG_FILE_LINE_BUFFER_SIZE+1];
  char linebuf[CONFIG_FILE_LINE_SIZE];
  int line_num = 0;
  int result = 0, equal;
  char *fopt, *farg;
  char *str_index;
  size_t len, next_token;
  char delimiter;

  if ((file = fopen(filename, "r")) == 0)
    {
      fprintf (stderr, "%s: Error opening configuration file '%s'\n",
               CMDLINE_PARSER_PACKAGE, filename);
      return EXIT_FAILURE;
    }

  while ((fgets(linebuf, CONFIG_FILE_LINE_SIZE, file)) != 0)
    {
      ++line_num;
      my_argv[0] = '\0';
      len = strlen(linebuf);
      if (len > (CONFIG_FILE_LINE_BUFFER_SIZE-1))
        {
          fprintf (stderr, "%s:%s:%d: Line too long in configuration file\n",
                   CMDLINE_PARSER_PACKAGE, filename, line_num);
          result = EXIT_FAILURE;
          break;
        }

      /* find first non-whitespace character in the line */
      next_token = strspn (linebuf, " \t\r\n");
      str_index  = linebuf + next_token;

      if ( str_index[0] == '\0' || str_index[0] == '#')
        continue; /* empty line or comment line is skipped */

      fopt = str_index;

      /* truncate fopt at the end of the first non-valid character */
      next_token = strcspn (fopt, " \t\r\n=");

      if (fopt[next_token] == '\0') /* the line is over */
        {
          farg  = 0;
          equal = 0;
          goto noarg;
        }

      /* remember if equal sign is present */
      equal = (fopt[next_token] == '=');
      fopt[next_token++] = '\0';

      /* advance pointers to the next token after the end of fopt */
      next_token += strspn (fopt + next_token, " \t\r\n");

      /* check for the presence of equal sign, and if so, skip it */
      if ( !equal )
        if ((equal = (fopt[next_token] == '=')))
          {
            next_token++;
            next_token += strspn (fopt + next_token, " \t\r\n");
          }
      str_index  += next_token;

      /* find argument */
      farg = str_index;
      if ( farg[0] == '\"' || farg[0] == '\'' )
        { /* quoted argument */
          str_index = strchr (++farg, str_index[0] ); /* skip opening quote */
          if (! str_index)
            {
              fprintf
                (stderr,
                 "%s:%s:%d: unterminated string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }
      else
        { /* read up the remaining part up to a delimiter */
          next_token = strcspn (farg, " \t\r\n#\'\"");
          str_index += next_token;
        }

      /* truncate farg at the delimiter and store it for further check */
      delimiter = *str_index, *str_index++ = '\0';

      /* everything but comment is illegal at the end of line */
      if (delimiter != '\0' && delimiter != '#')
        {
          str_index += strspn(str_index, " \t\r\n");
          if (*str_index != '\0' && *str_index != '#')
            {
              fprintf
                (stderr,
                 "%s:%s:%d: malformed string in configuration file\n",
                 CMDLINE_PARSER_PACKAGE, filename, line_num);
              result = EXIT_FAILURE;
              break;
            }
        }

    noarg:
      if (!strcmp(fopt,"include")) {
        if (farg && *farg) {
          result = _cmdline_parser_configfile(farg, my_argc);
        } else {
          fprintf(stderr, "%s:%s:%d: include requires a filename argument.\n",
                  CMDLINE_PARSER_PACKAGE, filename, line_num);
        }
        continue;
      }
      len = strlen(fopt);
      strcat (my_argv, len > 1 ? "--" : "-");
      strcat (my_argv, fopt);
      if (len > 1 && ((farg && *farg) || equal))
        strcat (my_argv, "=");
      if (farg && *farg)
        strcat (my_argv, farg);
      ++(*my_argc);

      cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
      cmd_line_list_tmp->next = cmd_line_list;
      cmd_line_list = cmd_line_list_tmp;
      cmd_line_list->string_arg = gengetopt_strdup(my_argv);
    } /* while */

  if (file)
    fclose(file);
  return result;
}

int
cmdline_parser_configfile (
  const char *filename,
                           struct gengetopt_args_info *args_info,
                           int override, int initialize, int check_required)
{
  struct cmdline_parser_params params;

  params.override = override;
  params.initialize = initialize;
  params.check_required = check_required;
  params.check_ambiguity = 0;
  params.print_errors = 1;
  
  return cmdline_parser_config_file (filename, args_info, &params);
}

int
cmdline_parser_config_file (const char *filename,
                           struct gengetopt_args_info *args_info,
                           struct cmdline_parser_params *params)
{
  int i, result;
  int my_argc = 1;
  char **my_argv_arg;
  char *additional_error;

  /* store the program name */
  cmd_line_list_tmp = (struct line_list *) malloc (sizeof (struct line_list));
  cmd_line_list_tmp->next = cmd_line_list;
  cmd_line_list = cmd_line_list_tmp;
  cmd_line_list->string_arg = gengetopt_strdup (CMDLINE_PARSER_PACKAGE);

  result = _cmdline_parser_configfile(filename, &my_argc);

  if (result != EXIT_FAILURE) {
    my_argv_arg = (char **) malloc((my_argc+1) * sizeof(char *));
    cmd_line_list_tmp = cmd_line_list;

    for (i = my_argc - 1; i >= 0; --i) {
      my_argv_arg[i] = cmd_line_list_tmp->string_arg;
      cmd_line_list_tmp = cmd_line_list_tmp->next;
    }

    my_argv_arg[my_argc] = 0;

    additional_error = (char *)malloc(strlen(filename) + strlen(ADDITIONAL_ERROR) + 1);
    strcpy (additional_error, ADDITIONAL_ERROR);
    strcat (additional_error, filename);
    result =
      cmdline_parser_internal (my_argc, my_argv_arg, args_info,
                              params,
                              additional_error);

    free (additional_error);
    free (my_argv_arg);
  }

  free_cmd_list();
  return result;
}
/* vim: set ft=c noet ts=8 sts=8 sw=8 tw=80 nojs spell : */
