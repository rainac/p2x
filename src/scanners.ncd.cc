// -*- c++ -*- 
// This file has been automatically generated by 
// gennc.sh $Id: gennc.xsl 50 2015-04-08 12:45:49Z jwillkomm $ 
// from definition file xml/scanners.ncd.xml. Class mode is false.

#include <string>
#include <cstring>
#include <iostream>
#include <cstdlib>
#include <stdio.h>
#include "scanners.ncd.enum.hh"
#include "scanners.ncd.hh"
    char const *getScannerTypeName(unsigned long c) {
      switch(c) { 
       case SCANNER_NONE: return "NONE";
       case SCANNER_STRINGS: return "STRINGS";
       case SCANNER_NO_STRINGS: return "NO_STRINGS";
       case SCANNER_R: return "R";
       case SCANNER_C: return "C"; 
        default: break;
      }
      return "unknown value in enumeration ScannerType";
    }
    char const *getScannerTypeComment(unsigned long c) {
      switch(c) { 
       case SCANNER_NONE: return "";
       case SCANNER_STRINGS: return "";
       case SCANNER_NO_STRINGS: return "";
       case SCANNER_R: return "";
       case SCANNER_C: return ""; 
        default: break;
      }
      return "unknown value in enumeration ScannerType";
    }
    ScannerType getScannerTypeValue(char const *name, int *res) {
       if (res) *res = 0;
       if (name == 0 || *name == 0) { return SCANNER_NONE; 
       } else if (strcasecmp("NONE", name) == 0
          || strcasecmp("SCANNER_NONE", name) == 0) {
          return SCANNER_NONE; 
       } else if (strcasecmp("STRINGS", name) == 0
          || strcasecmp("SCANNER_STRINGS", name) == 0) {
          return SCANNER_STRINGS; 
       } else if (strcasecmp("NO_STRINGS", name) == 0
          || strcasecmp("SCANNER_NO_STRINGS", name) == 0) {
          return SCANNER_NO_STRINGS; 
       } else if (strcasecmp("R", name) == 0
          || strcasecmp("SCANNER_R", name) == 0) {
          return SCANNER_R; 
       } else if (strcasecmp("C", name) == 0
          || strcasecmp("SCANNER_C", name) == 0) {
          return SCANNER_C;  
       } else {
          if (! res) {
            fprintf(stderr, "error: unknown %s constant named `%s'\n",
              "ScannerType", name);
          } else {
             *res = 1;
          }
          return SCANNER_NONE;
       }
    }
    unsigned long getNumScannerType() {
      return 5;
    }
    ScannerType getScannerType(int which) {
      switch(which) { 
       case 0: return SCANNER_NONE;
       case 1: return SCANNER_STRINGS;
       case 2: return SCANNER_NO_STRINGS;
       case 3: return SCANNER_R;
       case 4: return SCANNER_C; 
       default: break;
      }
      fprintf(stderr, "error: ScannerType constant index %d out of range\n",
              which);
      return SCANNER_NONE;
    }
    
