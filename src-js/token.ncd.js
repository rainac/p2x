// -*- javascript -*- 
// This file has been automatically generated by 
// gennc.sh $Id: gennc-js.xsl 69 2015-04-15 07:15:49Z jwillkomm $ 
// from definition file ../src/xml/token.ncd.xml.

    var ENUM = ENUM || {}
    ENUM.createParserToken = function() {
      var k = 0
      var prefix = 'TOKEN_'
      var index = {
        EOF: (k = 0),
        KEYW_FOR: ++k,
        KEYW_IF: ++k,
        KEYW_WHILE: ++k,
        KEYW_ELSE: ++k,
        KEYW_ELSEIF: ++k,
        KEYW_SWITCH: ++k,
        KEYW_CASE: ++k,
        KEYW_OTHERWISE: ++k,
        KEYW_DEFAULT: ++k,
        KEYW_RETURN: ++k,
        KEYW_FUNCTION: ++k,
        KEYW_BREAK: ++k,
        KEYW_CONTINUE: ++k,
        KEYW_GOTO: ++k,
        KEYW_STATIC: ++k,
        KEYW_PUBLIC: ++k,
        KEYW_PRIVATE: ++k,
        KEYW_REGISTER: ++k,
        KEYW_AUTO: ++k,
        KEYW_VAR: ++k,
        KEYW_CONST: ++k,
        KEYW_GLOBAL: ++k,
        KEYW_PERSISTENT: ++k,
        KEYW_TRY: ++k,
        KEYW_CATCH: ++k,
        KEYW_END: ++k,
        ROOT: ++k,
        INTEGER: ++k,
        FLOAT: ++k,
        STRING: ++k,
        IDENTIFIER: ++k,
        HASH_COMMENT: ++k,
        CLINE_COMMENT: ++k,
        C_COMMENT: ++k,
        L_PAREN: ++k,
        R_PAREN: ++k,
        L_BRACE: ++k,
        R_BRACE: ++k,
        L_BRACKET: ++k,
        R_BRACKET: ++k,
        EQUAL: ++k,
        LESS: ++k,
        GREATER: ++k,
        EXCLAM: ++k,
        QUESTION: ++k,
        TILDE: ++k,
        PLUS: ++k,
        MINUS: ++k,
        MULT: ++k,
        DIV: ++k,
        BACKSLASH: ++k,
        MOD: ++k,
        POW: ++k,
        COLON: ++k,
        COMMA: ++k,
        SEMICOLON: ++k,
        FULL_STOP: ++k,
        UNDERSCORE: ++k,
        DOLLAR: ++k,
        AT: ++k,
        AND: ++k,
        OR: ++k,
        CIRC: ++k,
        HASH: ++k,
        QUOTE: ++k,
        APOS: ++k,
        CRETURN: ++k,
        NEWLINE: ++k,
        TAB: ++k,
        SPACE: ++k,
        JUXTA: ++k,
        JUXTA_POST: ++k,
        ILLEGAL_CHAR: ++k,
        LEFT_ARROW: ++k,
        RIGHT_ARROW: ++k,
        DOUBLE_LEFT_ARROW: ++k,
        DOUBLE_RIGHT_ARROW: ++k,
        DOUBLE_AND: ++k,
        DOUBLE_OR: ++k,
        DOUBLE_COLON: ++k,
        TRIPLE_COLON: ++k,
        LE: ++k,
        GE: ++k,
        DOUBLE_L_BRACKET: ++k,
        DOUBLE_R_BRACKET: ++k,
        DOUBLE_EQUAL: ++k,
        NOT_EQUAL: ++k,
        OPERATOR: ++k,
        MINUS_GREATER: ++k,
        DOUBLE_PLUS: ++k,
        DOUBLE_MINUS: ++k,
        DOUBLE_LESS: ++k,
        DOUBLE_GREATER: ++k,
        AND_EQUAL: ++k,
        OR_EQUAL: ++k,
        POW_EQUAL: ++k,
        PLUS_EQUAL: ++k,
        MINUS_EQUAL: ++k,
        MULT_EQUAL: ++k,
        DIV_EQUAL: ++k,
        MOD_EQUAL: ++k,
        DOUBLE_LESS_EQUAL: ++k,
        DOUBLE_GREATER_EQUAL: ++k,
        IGNORE: ++k,
        LAST: ++k,
        
      }
      k = 0
      var findex = {
        TOKEN_EOF: (k = 0),
        TOKEN_KEYW_FOR: ++k,
        TOKEN_KEYW_IF: ++k,
        TOKEN_KEYW_WHILE: ++k,
        TOKEN_KEYW_ELSE: ++k,
        TOKEN_KEYW_ELSEIF: ++k,
        TOKEN_KEYW_SWITCH: ++k,
        TOKEN_KEYW_CASE: ++k,
        TOKEN_KEYW_OTHERWISE: ++k,
        TOKEN_KEYW_DEFAULT: ++k,
        TOKEN_KEYW_RETURN: ++k,
        TOKEN_KEYW_FUNCTION: ++k,
        TOKEN_KEYW_BREAK: ++k,
        TOKEN_KEYW_CONTINUE: ++k,
        TOKEN_KEYW_GOTO: ++k,
        TOKEN_KEYW_STATIC: ++k,
        TOKEN_KEYW_PUBLIC: ++k,
        TOKEN_KEYW_PRIVATE: ++k,
        TOKEN_KEYW_REGISTER: ++k,
        TOKEN_KEYW_AUTO: ++k,
        TOKEN_KEYW_VAR: ++k,
        TOKEN_KEYW_CONST: ++k,
        TOKEN_KEYW_GLOBAL: ++k,
        TOKEN_KEYW_PERSISTENT: ++k,
        TOKEN_KEYW_TRY: ++k,
        TOKEN_KEYW_CATCH: ++k,
        TOKEN_KEYW_END: ++k,
        TOKEN_ROOT: ++k,
        TOKEN_INTEGER: ++k,
        TOKEN_FLOAT: ++k,
        TOKEN_STRING: ++k,
        TOKEN_IDENTIFIER: ++k,
        TOKEN_HASH_COMMENT: ++k,
        TOKEN_CLINE_COMMENT: ++k,
        TOKEN_C_COMMENT: ++k,
        TOKEN_L_PAREN: ++k,
        TOKEN_R_PAREN: ++k,
        TOKEN_L_BRACE: ++k,
        TOKEN_R_BRACE: ++k,
        TOKEN_L_BRACKET: ++k,
        TOKEN_R_BRACKET: ++k,
        TOKEN_EQUAL: ++k,
        TOKEN_LESS: ++k,
        TOKEN_GREATER: ++k,
        TOKEN_EXCLAM: ++k,
        TOKEN_QUESTION: ++k,
        TOKEN_TILDE: ++k,
        TOKEN_PLUS: ++k,
        TOKEN_MINUS: ++k,
        TOKEN_MULT: ++k,
        TOKEN_DIV: ++k,
        TOKEN_BACKSLASH: ++k,
        TOKEN_MOD: ++k,
        TOKEN_POW: ++k,
        TOKEN_COLON: ++k,
        TOKEN_COMMA: ++k,
        TOKEN_SEMICOLON: ++k,
        TOKEN_FULL_STOP: ++k,
        TOKEN_UNDERSCORE: ++k,
        TOKEN_DOLLAR: ++k,
        TOKEN_AT: ++k,
        TOKEN_AND: ++k,
        TOKEN_OR: ++k,
        TOKEN_CIRC: ++k,
        TOKEN_HASH: ++k,
        TOKEN_QUOTE: ++k,
        TOKEN_APOS: ++k,
        TOKEN_CRETURN: ++k,
        TOKEN_NEWLINE: ++k,
        TOKEN_TAB: ++k,
        TOKEN_SPACE: ++k,
        TOKEN_JUXTA: ++k,
        TOKEN_JUXTA_POST: ++k,
        TOKEN_ILLEGAL_CHAR: ++k,
        TOKEN_LEFT_ARROW: ++k,
        TOKEN_RIGHT_ARROW: ++k,
        TOKEN_DOUBLE_LEFT_ARROW: ++k,
        TOKEN_DOUBLE_RIGHT_ARROW: ++k,
        TOKEN_DOUBLE_AND: ++k,
        TOKEN_DOUBLE_OR: ++k,
        TOKEN_DOUBLE_COLON: ++k,
        TOKEN_TRIPLE_COLON: ++k,
        TOKEN_LE: ++k,
        TOKEN_GE: ++k,
        TOKEN_DOUBLE_L_BRACKET: ++k,
        TOKEN_DOUBLE_R_BRACKET: ++k,
        TOKEN_DOUBLE_EQUAL: ++k,
        TOKEN_NOT_EQUAL: ++k,
        TOKEN_OPERATOR: ++k,
        TOKEN_MINUS_GREATER: ++k,
        TOKEN_DOUBLE_PLUS: ++k,
        TOKEN_DOUBLE_MINUS: ++k,
        TOKEN_DOUBLE_LESS: ++k,
        TOKEN_DOUBLE_GREATER: ++k,
        TOKEN_AND_EQUAL: ++k,
        TOKEN_OR_EQUAL: ++k,
        TOKEN_POW_EQUAL: ++k,
        TOKEN_PLUS_EQUAL: ++k,
        TOKEN_MINUS_EQUAL: ++k,
        TOKEN_MULT_EQUAL: ++k,
        TOKEN_DIV_EQUAL: ++k,
        TOKEN_MOD_EQUAL: ++k,
        TOKEN_DOUBLE_LESS_EQUAL: ++k,
        TOKEN_DOUBLE_GREATER_EQUAL: ++k,
        TOKEN_IGNORE: ++k,
        TOKEN_LAST: ++k,
        
      }
      var comments = {
        EOF: '',
        KEYW_FOR: '',
        KEYW_IF: '',
        KEYW_WHILE: '',
        KEYW_ELSE: '',
        KEYW_ELSEIF: '',
        KEYW_SWITCH: '',
        KEYW_CASE: '',
        KEYW_OTHERWISE: '',
        KEYW_DEFAULT: '',
        KEYW_RETURN: '',
        KEYW_FUNCTION: '',
        KEYW_BREAK: '',
        KEYW_CONTINUE: '',
        KEYW_GOTO: '',
        KEYW_STATIC: '',
        KEYW_PUBLIC: '',
        KEYW_PRIVATE: '',
        KEYW_REGISTER: '',
        KEYW_AUTO: '',
        KEYW_VAR: '',
        KEYW_CONST: '',
        KEYW_GLOBAL: '',
        KEYW_PERSISTENT: '',
        KEYW_TRY: '',
        KEYW_CATCH: '',
        KEYW_END: '',
        ROOT: '',
        INTEGER: '',
        FLOAT: '',
        STRING: '',
        IDENTIFIER: '',
        HASH_COMMENT: '',
        CLINE_COMMENT: '',
        C_COMMENT: '',
        L_PAREN: '',
        R_PAREN: '',
        L_BRACE: '',
        R_BRACE: '',
        L_BRACKET: '',
        R_BRACKET: '',
        EQUAL: '',
        LESS: '',
        GREATER: '',
        EXCLAM: '',
        QUESTION: '',
        TILDE: '',
        PLUS: '',
        MINUS: '',
        MULT: '',
        DIV: '',
        BACKSLASH: '',
        MOD: '',
        POW: '',
        COLON: '',
        COMMA: '',
        SEMICOLON: '',
        FULL_STOP: '',
        UNDERSCORE: '',
        DOLLAR: '',
        AT: '',
        AND: '',
        OR: '',
        CIRC: '',
        HASH: '',
        QUOTE: '',
        APOS: '',
        CRETURN: '',
        NEWLINE: '',
        TAB: '',
        SPACE: '',
        JUXTA: '',
        JUXTA_POST: '',
        ILLEGAL_CHAR: '',
        LEFT_ARROW: '',
        RIGHT_ARROW: '',
        DOUBLE_LEFT_ARROW: '',
        DOUBLE_RIGHT_ARROW: '',
        DOUBLE_AND: '',
        DOUBLE_OR: '',
        DOUBLE_COLON: '',
        TRIPLE_COLON: '',
        LE: '',
        GE: '',
        DOUBLE_L_BRACKET: '',
        DOUBLE_R_BRACKET: '',
        DOUBLE_EQUAL: '',
        NOT_EQUAL: '',
        OPERATOR: '',
        MINUS_GREATER: '',
        DOUBLE_PLUS: '',
        DOUBLE_MINUS: '',
        DOUBLE_LESS: '',
        DOUBLE_GREATER: '',
        AND_EQUAL: '',
        OR_EQUAL: '',
        POW_EQUAL: '',
        PLUS_EQUAL: '',
        MINUS_EQUAL: '',
        MULT_EQUAL: '',
        DIV_EQUAL: '',
        MOD_EQUAL: '',
        DOUBLE_LESS_EQUAL: '',
        DOUBLE_GREATER_EQUAL: '',
        IGNORE: '',
        LAST: '',
        
      }
      var names = []
      var names_index = {}
      for (n in index) {
        names.push(n)
        names_index[index[n]] = n
      }
      var names_l = names.map(function (n) { return n.toLowerCase(); })
      var res = findex
      res.prefix = prefix
      res.index = index
      res.full_index = findex
      res.names = names
      res.names_l = names_l
      res.names_index = names_index
      res.comments = comments
      return res
    }
    ENUM.ParserToken = ENUM.createParserToken()
    ENUM.getParserTokenName = function(code) {
      return ENUM.ParserToken.names_index[code]
    }
    ENUM.getParserTokenComment = function(code) {
      var name = ENUM.getParserTokenName(code)
      return ENUM.ParserToken.comments[name]
    }
    ENUM.getParserTokenValue = function(name) {
      if (name in ENUM.ParserToken.index) {
        return ENUM.ParserToken.index[name];
      } else {
         var pname = name.substring(ENUM.ParserToken.prefix.length)
         if (pname && pname in ENUM.ParserToken.index) {
            return ENUM.ParserToken.index[pname]
         } else if (ENUM.ParserToken.names_l.indexOf(name) > -1) {
           return ENUM.ParserToken.index[ENUM.ParserToken.names[ENUM.ParserToken.names_l.indexOf(name)]]
         } else if (ENUM.ParserToken.names_l.indexOf(pname) > -1) {
           return ENUM.ParserToken.index[ENUM.ParserToken.names[ENUM.ParserToken.names_l.indexOf(pname)]]
         }
      }
    }
    ENUM.getNumParserToken = function() {
      return ENUM.ParserToken.names.length
    }
    ENUM.getParserToken = function(which) {
       var name = ENUM.ParserToken.names[which]
       return ENUM.getParserTokenValue(name)
    }
    
    if (typeof window == 'undefined') {
       for (k in ENUM) {
          exports[k] = ENUM[k]
       }
       
    }
  